{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst options_1 = require(\"./options\");\n\nconst utils_1 = require(\"./utils\");\n/**\n * Divides a number [value] until a decimal value is found.\n *\n * A generator that divides a number [value] by a denominator,\n * defined by the grouping base (e.g. 1000 by default).\n *\n * The denominator is increased every turn by multiplying\n * the base by itself, until a decimal value is created.\n *\n * @param {number} value - Number to be divided\n * @param {number} base - Grouping base/interval\n */\n\n\nfunction* divider(value, base) {\n  let denominator = base;\n\n  while (true) {\n    const result = value / denominator;\n\n    if (result < 1) {\n      return; // End of operation\n    }\n\n    yield result; // Increase the denominator after each turn\n\n    denominator *= base;\n  }\n}\n/**\n * Millify converts long numbers to human-readable strings.\n *\n * @param {number} value - Number to convert\n * @param {Options} options\n */\n\n\nfunction Millify(value, options) {\n  // Override default options with supplied ones\n  const opts = Object.assign(Object.assign({}, options_1.defaultOptions), options);\n\n  if (!Array.isArray(opts.units) || !opts.units.length) {\n    throw new Error('Units is empty or not an Array');\n  } // Validate value for type and length\n\n\n  let val = utils_1.parseValue(value); // Add a minus sign (-) prefix if it's a negative number\n\n  const prefix = val < 0 ? '-' : ''; // Work with positive values\n\n  val = Math.abs(val); // Keep dividing the input value by the numerical grouping value (base)\n  // until the decimal and unit index is deciphered\n\n  let unitIndex = 0;\n\n  for (const result of divider(val, opts.base)) {\n    val = result;\n    unitIndex += 1;\n  } // Avoid out of bounds error by using the last available unit\n\n\n  unitIndex = unitIndex > opts.units.length ? opts.units.length - 1 : unitIndex; // Calculate the unit suffix and apply lowercase option\n\n  const suffix = opts.lowerCase ? opts.units[unitIndex].toLowerCase() : opts.units[unitIndex]; // Add a space between number and abbreviation\n\n  const space = opts.space ? ' ' : ''; // Round decimal up to desired precision\n\n  const rounded = utils_1.roundTo(val, opts.precision); // Replace decimal mark if desired\n\n  const formatted = rounded.toString().replace(options_1.defaultOptions.decimalSeparator, opts.decimalSeparator);\n  return \"\".concat(prefix).concat(formatted).concat(space).concat(suffix);\n}\n\nexports.default = Millify;","map":null,"metadata":{},"sourceType":"script"}